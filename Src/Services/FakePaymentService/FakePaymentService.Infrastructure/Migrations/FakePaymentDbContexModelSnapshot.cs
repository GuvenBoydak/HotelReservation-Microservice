// <auto-generated />
using System;
using FakePaymentService.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FakePaymentService.Infrastructure.Migrations
{
    [DbContext(typeof(FakePaymentDbContex))]
    partial class FakePaymentDbContexModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FakePaymentService.Domain.Models.CreditCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CardCVV")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CardExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("CreditCard");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a98f7dac-1e48-479b-a727-ff5fe1b875ec"),
                            Amount = 100000m,
                            CardCVV = "852",
                            CardExpiry = new DateTime(2026, 5, 1, 1, 1, 1, 0, DateTimeKind.Utc),
                            CardName = "Test",
                            CardNumber = "5555112548076309",
                            CreatedDate = new DateTime(2023, 1, 27, 16, 3, 28, 717, DateTimeKind.Utc).AddTicks(309),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2a2b07a1-648c-4d0e-9c85-faec301a81a5"),
                            Amount = 100000m,
                            CardCVV = "861",
                            CardExpiry = new DateTime(2026, 5, 1, 1, 1, 1, 0, DateTimeKind.Utc),
                            CardName = "Deneme",
                            CardNumber = "5444112548076404",
                            CreatedDate = new DateTime(2023, 1, 27, 16, 3, 28, 717, DateTimeKind.Utc).AddTicks(324),
                            IsDeleted = false
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
